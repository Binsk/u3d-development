# About
## Animation
3D models can use various kinds of animation but the primary method 
in U3D is skeletal animation. When exported, bone transforms are 
specified through skins, tracks, and channels.

A bone can be transformed in 3 different ways:
* Positional transform
* Rotational transform
* Scalar transform

Although, rotational transforms account for the majority of skeletal
animation. A `channel` is a series of transforms to apply to a 
`bone id` over the length of  an `animation track`. A channel only
defines **one type** of transform so a single bone may have 3
different animation channels, one for each type of transform.

An `animation track` will contain a series of channels that define
how each bone on the model should be transformed at a certain point
in time while a `skin` effectively defines which bone transforms are
applied to which vertices. 

All of this data can be auto-loaded and generated through the 
`GLTFBuilder` in the form of an `AnimationTree`. An `AnimationTree` is
a U3D-specific structure that can contain all the `animation tracks` 
for a model. This class handles queuing which tracks should be active
as well as how tracks should merge and stack to create more complex
and dynamic animations.

The `AnimationTree` can be managed manually, however it is more
effective to attach the tree to the `obj_animation_controller` to 
allow the controller to handle animation updates and optimize out
unnecessary calculations.

## Importing
Animation is fickle, specifically when it comes to scaling. When 
exporting / designing your armatures you must **guarantee** that
they have a scale of 1 before exporting and you should have all
of your transforms **applied** to the model and armatures!

If not designed correctly, this can be a pain to fix in software
such as Blender and it will be unable to load correctly in U3D!

## Maximum Bones
Because GameMaker is using exceptionally old shader versions we
don't have access to a number of large-data buffers in the vertex shader. 
Bones must all be passed in via mat4[] uniforms which limits the number of
bones that can be sent.

At the moment, the system is limited to 64 full-feature bones on DirectX
platforms and 80 on OpenGL. These values were taken from my own personal
machine on my integrated card at roughly the amount where there were too
many components to run the shader correctly. Different hardware will have
different limitations.

The maximum partial-feature bones are 128 on DirectX platforms and 160 on
OpenGL platforms. If your skeleton has more bones than the lower cap then
they will be sent to the shader as quaternion+position pairs instead of 4x4
matrices; however this requires that all bones have uniform scales across all
axes. 